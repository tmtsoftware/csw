include required("logging.conf")
include required("test-serialization.conf")

csw.event.client.perf {

  # for serious measurements you should increase the totalMessagesFactor
  totalMessagesFactor = 1.0

  warmup = 2000
  burst-size = 8

  # specify number of messages to be sent in one second
  publish-frequency = 100

  pattern-based-subscription = off
  one-connection-per-jvm = off

  # For plotting graphs, make sure that following things are installed on machine:
  #   Mac:    brew install gnuplot --with-cairo
  #           brew install lua
  #   Linux:  sudo yum install pango-devel
  #           sudo yum install gnuplot
  #           install lua
  #   Ubuntu: sudo apt-get install libcairo2-dev
  #           sudo apt-get install libpango1.0-dev
  #           sudo apt-get install gnuplot
  #           sudo apt-get install lua5.2
  # For gc plots, follow below steps:
  #   1. git clone https://github.com/kpritam/jstatplot.git
  #   2. sbt stage
  #   3. update value of jstatPlotPath from SystemMontoringSupport class with the generated path
  #       ex. $HOME/jstatplot/target/universal/stage/bin/jstatplot
  system-monitoring = off

  # turn off to enable kafka
  redis-enabled = on

  redis {
    host = "localhost"
    port = 26379
    pattern-for-subscription = "*" // subscribes to subsytem*<pattern>
  }

  kafka {
    host = "localhost"
    port = 9092
    pattern-for-subscription = ".*" // subscribes to subsytem.*<pattern>
  }
}


akka {
  log-dead-letters = 100

  testconductor {
    # Timeout for joining a barrier: this is the maximum time any participants
    # waits for everybody else to join a named barrier.
    barrier-timeout = 60m
  }

  scheduler {
    tick-duration = 1ms
  }

  coordinated-shutdown {
    # Run the coordinated shutdown when the JVM process exits, e.g.
    # via kill SIGTERM signal (SIGINT ctrl-c doesn't work).
    run-by-jvm-shutdown-hook = on
  }

  actor {
    provider = remote
    serialize-creators = false
    debug {
      lifecycle = off
    }
  }

  remote {
    default-remote-dispatcher {
      fork-join-executor {
        # parallelism-factor = 0.5
        parallelism-min = 4
        parallelism-max = 4
      }
      # Set to 10 by default. Might be worthwhile to experiment with.
      # throughput = 100
    }

    artery {
      enabled = on
      transport = tcp
    }
  }

  http {
    host-connection-pool {
      # The maximum number of parallel connections that a connection pool to a
      # single host endpoint is allowed to establish. Must be greater than zero.
      max-connections = 8192

      max-open-requests = 8192

      response-entity-subscription-timeout = 50.seconds
    }
  }

  kafka.consumer {
    stop-timeout = 5s
  }
}