package csw.framework.deploy.hostconfig.cli

import java.io.ByteArrayOutputStream
import java.nio.file.Paths

import org.scalatest.BeforeAndAfterEach
import org.scalatest
import org.scalatest.matchers.should.Matchers

// DEOPSCSW-174: Starting Multiple Containers with an init Script
// DEOPSCSW-175: Starting multiple containers from command Line
class ArgsParserTest extends scalatest.funsuite.AnyFunSuite with Matchers with BeforeAndAfterEach {
  val inputFilePath         = "/tmp/some/input/file"
  val containerCmdAppScript = "./bin/container-cmd-app"

  // Capture output/error generated by the parser, for cleaner test output. If interested, errCapture.toString will return capture errors.
  val outCapture = new ByteArrayOutputStream
  val errCapture = new ByteArrayOutputStream

  override protected def afterEach(): Unit = {
    outCapture.reset()
    errCapture.reset()
  }

  def silentParse(args: Array[String]): Option[Options] =
    Console.withOut(outCapture) {
      Console.withErr(errCapture) {
        new ArgsParser("host-config").parse(args.toList)
      }
    }

  test("should able to parse when all arguments are provided | DEOPSCSW-174, DEOPSCSW-175") {
    val args                     = Array("--local", inputFilePath, "--container-script", containerCmdAppScript)
    val options: Option[Options] = silentParse(args)
    options should contain(
      Options(local = true, Some(Paths.get(inputFilePath)), Some(containerCmdAppScript))
    )
  }

  test(
    "should able to parse arguments with default value of false when local option is not provided | DEOPSCSW-174, DEOPSCSW-175"
  ) {
    val args                     = Array(inputFilePath, "-s", containerCmdAppScript)
    val options: Option[Options] = silentParse(args)
    options should contain(
      Options(local = false, Some(Paths.get(inputFilePath)), Some(containerCmdAppScript))
    )
  }

  test("should not parse if inputFilePath is not provided | DEOPSCSW-174, DEOPSCSW-175") {
    val args                     = Array("--local", "--container-script", containerCmdAppScript)
    val options: Option[Options] = silentParse(args)
    options shouldBe None
  }

  test("should not parse if no arguments provided | DEOPSCSW-174, DEOPSCSW-175") {
    val args                     = Array[String]()
    val options: Option[Options] = silentParse(args)
    options shouldBe None
  }
}
