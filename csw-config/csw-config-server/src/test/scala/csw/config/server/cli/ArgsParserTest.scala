package csw.config.server.cli
import java.io.ByteArrayOutputStream

import org.scalatest.BeforeAndAfterEach
import org.scalatest.funsuite.AnyFunSuite
import org.scalatest.matchers.should.Matchers

// DEOPSCSW-130: Command line App for HTTP server
class ArgsParserTest extends AnyFunSuite with Matchers with BeforeAndAfterEach {

  // Capture output/error generated by the parser, for cleaner test output. If interested, errCapture.toString will return capture errors.
  val outCapture = new ByteArrayOutputStream
  val errCapture = new ByteArrayOutputStream

  override protected def afterEach(): Unit = {
    outCapture.reset()
    errCapture.reset()
  }

  def silentParse(argv: Array[String]): Option[Options] =
    Console.withOut(outCapture) {
      Console.withErr(errCapture) {
        new ArgsParser("csw-config-server").parse(argv.toList)
      }
    }

  test("should set init to false and port to None if no options are provided | DEOPSCSW-130") {
    val args               = Array[String]()
    val x: Option[Options] = silentParse(args)
    x.get shouldEqual Options(initRepo = false, None)
  }

  test("should set init to true if option --initRepo is provided | DEOPSCSW-130") {
    val args               = Array("--initRepo")
    val x: Option[Options] = silentParse(args)
    x.get shouldEqual Options(initRepo = true, None)
  }

  test("should set port with the value provided with -- port option | DEOPSCSW-130") {
    val args               = Array("--port", "2345")
    val x: Option[Options] = silentParse(args)
    x.get shouldEqual Options(initRepo = false, Some(2345))
  }

  test(
    "should set init to true if --initRepo option is provided and port with the value provided with -- port option | DEOPSCSW-130"
  ) {
    val args               = Array("--initRepo", "--port", "2345")
    val x: Option[Options] = silentParse(args)
    x.get shouldEqual Options(initRepo = true, Some(2345))
  }

}
