name: dev

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
    paths-ignore:
      - "scripts/**"
      - "tools/**"
      - "jenkins/**"
      - "notes/**"

jobs:
  unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: olafurpg/setup-scala@v7
        with:
          java-version: adopt@1.11

      - name: Cache ~/.cache
        uses: actions/cache@v1
        with:
          path: ~/.cache
          key: ${{ runner.os }}-coursier-${{ hashFiles('project/Libs.scala') }}-${{ hashFiles('**/*.sbt') }}
          restore-keys: |
            ${{ runner.os }}-coursier-

      - name: Cache ~/.sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('project/build.properties') }}-${{ hashFiles('**/*.sbt') }}
          restore-keys: |
            ${{ runner.os }}-sbt-

      - name: Configure ntp time
        run: |
          sudo apt-get install ntp -y
          sudo ntptime -T 37

      - name: Tests
        run: |
          sbt -Dakka.actor.serialize-messages=on -DenableCoverage=true -DgenerateStoryReport=true ';set every enableFatalWarnings := true; csw-time/test:test'
          sbt -Dakka.actor.serialize-messages=on -DenableCoverage=true -DgenerateStoryReport=true -DdisableTimeTests ';set every enableFatalWarnings := true; test:test'

      - name: Coverage Report
        run: |
          sbt -DenableCoverage=true coverageReport
          sbt coverageAggregate

      - name: Generate RTM
        if: always()
        run: |
          ./scripts/coursier launch --channel https://raw.githubusercontent.com/tmtsoftware/osw-apps/master/apps.json rtm:d1c8c7e -- target/RTM/testStoryMapping.txt tools/RTM/cswStoryToRequirementMap.csv target/RTM/testRequirementsMapping.txt

      - name: Upload RTM
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: RTM
          path: target/RTM

      - uses: actions/upload-artifact@v1
        with:
          name: Coverage Report
          path: target/scala-2.13/scoverage-report

  multi-jvm-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: olafurpg/setup-scala@v5
        with:
          java-version: adopt@1.11

      - name: Cache ~/.cache
        uses: actions/cache@v1
        with:
          path: ~/.cache
          key: ${{ runner.os }}-coursier-${{ hashFiles('project/Libs.scala') }}-${{ hashFiles('**/*.sbt') }}
          restore-keys: |
            ${{ runner.os }}-coursier-

      - name: Cache ~/.sbt
        uses: actions/cache@v1
        with:
          path: ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('project/build.properties') }}-${{ hashFiles('**/*.sbt') }}
          restore-keys: |
            ${{ runner.os }}-sbt-

      - name: Docs Check
        run: |
          sbt clean scalafmtCheck scalastyle
          sbt makeSite

      - name: Multi-Jvm Tests
        run: sbt -DgenerateStoryReport=true ';set every enableFatalWarnings := true; integration/multi-jvm:test'

  slack-success:
    needs: [unit-tests, multi-jvm-tests]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - uses: kpritam/slack-job-status-action@v1
        with:
          job-status: Success
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel: ci-dev

  slack-failure:
    needs: [unit-tests, multi-jvm-tests]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - uses: kpritam/slack-job-status-action@v1
        with:
          job-status: Failure
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel: ci-dev

  slack-cancelled:
    needs: [unit-tests, multi-jvm-tests]
    if: cancelled()
    runs-on: ubuntu-latest
    steps:
      - uses: kpritam/slack-job-status-action@v1
        with:
          job-status: Cancelled
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel: ci-dev
